// =================================================================================
//	UMoreModalDialogs.cp					©1999, Charles Lechasseur
// =================================================================================
//
// More modal dialog functions. A little like PP's "UModalDialogs" class.

/* Copyright (c) 2000-2002, Charles Lechasseur
**  All rights reserved.
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
** 
** - Redistributions of source code must retain the above copyright notice,
**   this list of conditions and the following disclaimer.
** 
** - Redistributions in binary form must reproduce the above copyright notice,
**   this list of conditions and the following disclaimer in the
**   documentation and/or other materials provided with the distribution.
** 
** - The name of Charles Lechasseur may not be used to endorse or promote
**   products derived from this software without specific prior written permission. 
** 
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
** FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CHARLES LECHASSEUR OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
** BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
** BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

#include "UMoreModalDialogs.h"

// =================================================================================
//		UMoreModalDialogs class
// =================================================================================
//
//	More functions to handle modal dialogs.


// ---------------------------------------------------------------------------------
//		¥ AskOneQuestion
// ---------------------------------------------------------------------------------
//
//	Presents a modal dialog to the user and waits to hear OK or Cancel.
//	Returns TRUE if msg_OK is received. Returns false if msg_Cancel is received.
//	Any other messages are ignored.

Boolean
UMoreModalDialogs::AskOneQuestion(
	LCommander	*inSuper,
	ResIDT		inDialogID )
{
	StDialogHandler	theHandler(inDialogID, inSuper);
	LWindow			*theDialog = theHandler.GetDialog();
	
	theDialog->Show();
	
	Boolean		entryOK = false;
	
	while (true) {
		MessageT	hitMessage = theHandler.DoDialog();
		
		if (hitMessage == msg_Cancel) {
			break;
			
		} else if (hitMessage == msg_OK) {
			entryOK = true;
			break;
		}
	}
	
	return entryOK;
}


// ---------------------------------------------------------------------------------
//		¥ AskOneQuestionWithShowAgain
// ---------------------------------------------------------------------------------
//
//	Presents a modal dialog to the user and waits to hear OK or Cancel.
//	Returns TRUE if msg_OK is received. Returns false if msg_Cancel is received.
//
//	The dialog is expected to have a "Don't show again" checkbox. inShowAgainMessage
//	is the message generated by that checkbox. The function returns the final state
//	of the checkbox in the outShowAgain parameter.

Boolean
UMoreModalDialogs::AskOneQuestionWithShowAgain(
	LCommander	*inSuper,
	ResIDT		inDialogID,
	MessageT	inShowAgainMessage,
	Boolean&	outShowAgain )
{
	StDontShowAgainDialogHandler	theHandler(inDialogID, inShowAgainMessage, inSuper);
	LWindow*	theDialog = theHandler.GetDialog();
	
	theDialog->Show();
	
	Boolean		entryOK = false;
	outShowAgain = true;
	
	while (true) {
		MessageT	hitMessage = theHandler.DoDialog();
		
		if (hitMessage == msg_Cancel) {
			break;
			
		} else if (hitMessage == msg_OK) {
			entryOK = true;
			break;
		
		} else if (hitMessage == msg_DontShowAgain) {
			outShowAgain = false;
			
		} else if (hitMessage == msg_ShowAgain) {
			outShowAgain = true;
		}
	}
	
	return entryOK;
}


#pragma mark -


// =================================================================================
//		StNoAboutDialogHandler
// =================================================================================
//
//	Functions just like the standard StDialogHandler, but does not enable the
//	"About..." item in the apple menu. can be useful for error dialogs or
//	an about box (to avoid showing it as many times as you want).


// ---------------------------------------------------------------------------------
//		¥ Constructor 
// ---------------------------------------------------------------------------------

StNoAboutDialogHandler::StNoAboutDialogHandler(
	ResIDT			inDialogResID, 
	LCommander		*inSuper )
	: StDialogHandler( inDialogResID, inSuper )
{
}


// ---------------------------------------------------------------------------------
//		¥ Constructor 
// ---------------------------------------------------------------------------------

StNoAboutDialogHandler::StNoAboutDialogHandler(
	LWindow			*inWindow,
	LCommander		*inSuper )
	: StDialogHandler( inWindow, inSuper )
{
}


// ---------------------------------------------------------------------------------
//		¥ Destructor
// ---------------------------------------------------------------------------------

StNoAboutDialogHandler::~StNoAboutDialogHandler()
{
}


// ---------------------------------------------------------------------------------
//		¥ FindCommandStatus
// ---------------------------------------------------------------------------------
//	Calls inherited for any command but cmd_About. rejects cmd_About.

void
StNoAboutDialogHandler::FindCommandStatus(
	CommandT		inCommand,
	Boolean			&outEnabled,
	Boolean			&outUsesMark,
	UInt16			&outMark,
	Str255			outName )
{
	// we do not enable the Apple menu item.
	if (inCommand == cmd_About)
		outEnabled = false;
	else	// call inherited for other commands.
		StDialogHandler::FindCommandStatus( inCommand, outEnabled, outUsesMark, outMark, outName );
}


#pragma mark -


// =================================================================================
//		StDontShowAgainDialogHandler
// =================================================================================
//
//	Functions like StDialogHandler, with a twist: it enables you to implement
//	a "Don't show again" checkbox.
//
//	When creating the dialog, pass along the Message generated by the control that's used
//	as a "Don't show again" control. Whenever the dialog hears a message from that control,
// 	it checks the control's state and generates one of two message:
//		msg_DontShowAgain	if the control is ON, or
//		msg_ShowAgain		if the control is OFF.


// ---------------------------------------------------------------------------------
//		¥ Constructor 
// ---------------------------------------------------------------------------------

StDontShowAgainDialogHandler::StDontShowAgainDialogHandler(
	ResIDT			inDialogResID,
	MessageT		inControlMessage,
	LCommander		*inSuper )
	: StDialogHandler( inDialogResID, inSuper )
{
	mControlMessage = inControlMessage;
}


// ---------------------------------------------------------------------------------
//		¥ Constructor 
// ---------------------------------------------------------------------------------

StDontShowAgainDialogHandler::StDontShowAgainDialogHandler(
	LWindow			*inWindow,
	MessageT		inControlMessage,
	LCommander		*inSuper )
	: StDialogHandler( inWindow, inSuper )
{
	mControlMessage = inControlMessage;
}


// ---------------------------------------------------------------------------------
//		¥ Destructor
// ---------------------------------------------------------------------------------

StDontShowAgainDialogHandler::~StDontShowAgainDialogHandler()
{
}


// ---------------------------------------------------------------------------
//	¥ ListenToMessage												  [public]
// ---------------------------------------------------------------------------

void
StDontShowAgainDialogHandler::ListenToMessage(
	MessageT	inMessage,
	void*		ioParam )
{
	// inherited will store message. here's our chance to modify it.
	MessageT message = inMessage;
	
	// is it the control's message?
	if (message == mControlMessage)
	{
		// change it according to control's value. control's value is pointed by ioParam.
		if (*((SInt32*) ioParam) == Button_On)
			message = msg_DontShowAgain;
		else
			message = msg_ShowAgain;
	}
	
	// call inherited to store it.
	StDialogHandler::ListenToMessage( message, ioParam );
}